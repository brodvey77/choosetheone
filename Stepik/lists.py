# –°—É–º–º—ã –¥–≤—É—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n‚â•2, –∞ –∑–∞—Ç–µ–º nn —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç
# –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å—É–º–º —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª (00 –∏ 11, 11 –∏ 22, 22 –∏ 33 –∏ —Ç.–¥.).

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å—É–º–º —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª.

# n = int(input())
# lst = []
# final_lst = []
#
# for i in range(n):
#     a = int(input())
#     lst.append(a)
#
# for i in range(len(lst) - 1):
#     final_lst.append(lst[0] + lst[1])
#     del lst[0]
#
# print(final_lst)

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è
# —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ—è—â–∏–µ –ø–æ –Ω–µ—á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º, –∞ –∑–∞—Ç–µ–º
# –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä del.

# n = int(input())
# lst = []
#
# for i in range(n):
#     a = int(input())
#     lst.append(a)
#
# del lst[::2]
# print(lst)

# k-–∞—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ üå∂Ô∏èüå∂Ô∏è
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n –∏ n —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º —á–∏—Å–ª–æ k. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç
# kk-—É—é –±—É–∫–≤—É –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn,  –¥–∞–ª–µ–µ nn —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –í –∫–æ–Ω—Ü–µ –≤–≤–æ–¥–∏—Ç—Å—è
# –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ kk ‚Äì –Ω–æ–º–µ—Ä –±—É–∫–≤—ã (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã).
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ, –∏ –≤ –Ω–∏—Ö –Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ —Ç–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏
# –≤—ã–≤–æ–¥–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å


# n = int(input())
# lst = []
# for i in range(1, n + 1):
#     a = str(input())
#     lst.append(a)
#
# k = int(input())
#
# text = ''
# for i in lst:
#     if len(i) < k:
#         continue
#     else:
#         text += i[k - 1]
# print(text)


# –°–∏–º–≤–æ–ª—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑
# —Å–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Å–ø–∏—Å–∫–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã.

# n = int(input())
# a = []
#
# for i in range(1, n + 1):
#     a.extend(str(input()))
#
# print(a)

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# count = 0
# for i in numbers:
#     count += pow(i, 2)
# print(count)

# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# print(sum([i**2 for i in numbers]))

# n = 5
# lst = []
# for i in range(1, n + 1):
#     x = lst.append(int(input()))
# for i in lst:
#     print(i)
# print()
# for i in lst:
#     print((i ** 2) + (i * 2) + 1)


# n = int(input())
#
# lst = []
#
# for i in range(n):
#     a = lst.append(int(input()))
# maximum = max(lst)
# minimum = min(lst)
#
# for i in lst:
#     if i == maximum:
#         lst.remove(i)
#     elif i == minimum:
#         lst.remove(i)
# for i in lst:
#     print(i)

# n = int(input())
# lst =[]
#
# for i in range(n):
#     a = lst.append(input())
# a = set(lst)
# print(*a, sep='\n')


# n = int(input())
# lst = []
# final_lst = []

# for i in range(n):
#     a = lst.append(input())
#
# for i in lst:
#     if i in final_lst:
#         continue
#     else:
#         final_lst.append(i)
# print(*final_lst)


# dat = []
# for _ in range(int(input())):
#     el = input()
#     if el not in dat:
#         dat.append(el)
#         print(el)


# n = int(input())
# lst = []
#
# for i in range(n):
#     a = lst.append(input())
#
# search = str.lower(input())
#
# for i in lst:
#     if search in i.lower():
#         print(i)


# n = int(input())
# lst = []
# search_array = []
#
# for i in range(n):
#     a = lst.append(input())
#
# k = int(input())
#
# for j in range(k):
#     search = search_array.append(str.lower(input()))


# n = 5
# lst = ['trac', '–Ø–∑—ã–∫ Python –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω', 'C# - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', 'Stepik - –æ—Ç–ª–∏—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
#        'BEEGEEK FOREVER!', '—è–∑—ã–∫ Python –ø–æ—è–≤–∏–ª—Å—è 20 —Ñ–µ–≤—Ä–∞–ª—è 1991', '—è–∑—ã–∫ —Ñ—ã–≤—Ñ—ã–≤—Ñ—ã–≤',
#        '–Ø–∑—ã–∫ –≤—ã–∞—ã–≤–∞—ã–≤–∞ –≤–∞—ã–≤–∞ —ã–≤–∞—ã–≤ Python', '—è–∑—ã–∫ Python ,kf', 'kf', '–Ø–∑—ã–∫ Python']
# search_array = ['—è–∑—ã–∫', 'python']
# final = []
#
# final_lst = []
#
# for i in range(n):
#     a = lst.append(input())
#
# k = int(input())
#
# for j in range(k):
#     search = search_array.append(str.lower(input()))
#
# print(search_array[0])
#
# while len(lst) != 0:
#     for elem in lst:
#         if search_array[0] not in elem.lower():
#             lst.remove(elem)
#         else:
#             final_lst.append(elem)
#
# print(final_lst)


# lst = ['–Ø–∑—ã–∫ Python –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω', 'C# - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', 'Stepik - –æ—Ç–ª–∏—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
#        'BEEGEEK FOREVER!', '—è–∑—ã–∫ Python –ø–æ—è–≤–∏–ª—Å—è 20 —Ñ–µ–≤—Ä–∞–ª—è 1991']
#
# search_array = ['—è–∑—ã–∫', 'python']
# new_lst = []
#
# while len(search_array) > 0:
#     for element in search_array:
#         for i in lst:
#             if element not in i.lower():
#                 lst.remove(i)
#                 print(lst)
#     del search_array[0]

# n = int(input())
# lst = []
# search_array = []
# final_lst = []
#
# for i in range(n):
#     a = lst.append(input())
#
# k = int(input())
#
# for j in range(k):
#     search = search_array.append(str.lower(input()))
#
# while len(search_array) > 0:
#     for element in search_array:
#         for i in lst:
#             if element not in i.lower():
#                 lst.remove(i)
#     del search_array[0]
#
# print(*lst, sep='\n')


# s = [input() for _ in range(int(input()))]
# d = [input() for _ in range(int(input()))]
# for i in s:
#     for j in d:
#         if j.lower() not in i.lower():
#             break
#     else:
#         print(i)

# n = int(input())
# lst = []
# minus = []
# zero = []
# plus = []
#
# for i in range(n):
#     digit = int(input())
#     if digit < 0:
#         minus.append(digit)
#     if digit == 0:
#         zero.append(digit)
#     if digit > 0:
#         plus.append(digit)
# lst = minus + zero + plus
#
# print(lst)

# ip = '192.168.1.24'
# numbers = ip.split('.')    # —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
# print(numbers)

# words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
# s = ' '.join(words)
# print(s)

# s = 'BEEGEEK'
# chars = list(s)
# s = '**'.join(chars)
# print(s)

# string = str(input())
# a = string.split()
# for i in a:
#     print(i)

# print('\n'.join(input().split()))
# print(*input().split(), sep='\n')

# string = str(input())
#
# lst = string.split()
#
# for i in lst:
#     print(i[0] + '.', end='')

# string = str(input())
# lst = string.split('\\')
# for i in lst:
#     print(i)

# string = input().split()
# print(type(string))
# for i in string:
#     print('+' * int(i))

# string = input().split('.')
# flag = 'YES'
# for i in string:
#     if int(i) > 255 or int(i) < 0:
#         flag = 'NO'
#         break
# print(flag)

# text = input()
# delimiter = input()
# print(delimiter.join(text))


# string = input()
# lst = string.split()
# counter = 0
#
# for i in lst[:-1]:
#     for j in lst[1:]:
#         if int(i) == int(j):
#             counter += 1
#     del lst[0]
# print(counter)

# colors = ['Orange']
# colors.append('Red')
# colors.append('Blue')
# colors.append('Green')
# colors.insert(0, 'Violet')
# colors.insert(2, 'Purple')
#
# print(colors)

# colors = ['Red', 'Blue', 'Green', 'Black', 'White']
# del colors[-1]
# colors.remove('Green')
#
# print(colors)


# –í—Å–µ —Å—Ä–∞–∑—É 2 üå∂Ô∏è
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω:
#
# –ó–∞–º–µ–Ω–∏–ª –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞ 17; ok
# –î–æ–±–∞–≤–∏–ª —á–∏—Å–ª–∞ 4, 5 –∏ 6 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞; ok
# –£–¥–∞–ª–∏–ª –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞; ok
# –£–¥–≤–æ–∏–ª —Å–ø–∏—Å–æ–∫; ok
# –í—Å—Ç–∞–≤–∏–ª —á–∏—Å–ª–æ 25 –ø–æ –∏–Ω–¥–µ–∫—Å—É 3; ok
# –í—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫, —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ print().

# numbers = [8, 9, 10, 11]
# a = numbers.remove(9)
# b = numbers.insert(1, 17)
# c = numbers.append(4)
# d = numbers.append(5)
# e = numbers.append(6)
# for i in numbers:
#     if i == numbers[0]:
#         numbers.remove(i)
# numbers += numbers
# f = numbers.insert(3, 25)
#
# print(numbers)

# numbers = input().split()
#
# for i in range(len(numbers)):
#     numbers[i] = int(numbers[i])
#
# maximum = numbers.index(max(numbers))
# minimum = numbers.index(min(numbers))
# numbers[maximum], numbers[minimum] = min(numbers), max(numbers)
#
# print(numbers)

# text = input()
# counter = 0
# for i in text.split():
#     if i.lower() in ['a', 'an', 'the']:
#         counter += 1
# print(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: {counter}')

# n = input()
# n = int(n.lstrip('#'))
#
# for i in range(1, n + 1):
#     string = str(input())
#     if '#' in string:
#         string = string[:string.index('#')]
#         string = string.rstrip()
#     print(string)

# numbers = [4, 2, 8, 6, 5, 3, 10, 4, 100, 1, -7]
# numbers.sort()
# del numbers[0]
# del numbers[-1]
# numbers.sort(reverse=True)
# print(numbers)

# numbers = input().split()
#
# for i in range(len(numbers)):
#     numbers[i] = int(numbers[i])
# print(numbers)
# numbers.sort()
# print(*numbers)
# numbers.sort(reverse=True)
# print(*numbers)

# n = input().split()
# n.sort(key=int)
# print(*n)
# n.sort(reverse=True, key=int)
# print(*n)

# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
#             'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is',
#             'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [m[1:] for m in keywords]
#
# print(new_keywords)


# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del',
#             'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is',
#             'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
#
# new_keywords = [c for c in keywords if len(c) >= 5]
#
# print(new_keywords)


# palindromes = [p for p in range(101, 1000) if p // 100 == p % 10]
#
# print(palindromes)

# for i in range(100, 1000):
#     if i // 100 == i % 10:
#         print(i)

# import emoji
#
# print(emoji.emojize('hello world :red_heart:', variant='emoji_type'))

# n = int(input())
#
# list = [i ** 2 for i in range(1, n + 1)]
#
# print(*list, sep='\n')

# n = str(input())
#
# list =[pow(int(i), 3) for i in n.split()]
#
# print(*list)

# string = str(input())
# list = [i for i in string.split()]
#
# print(*list, sep='\n')